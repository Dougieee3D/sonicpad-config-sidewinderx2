[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f401xc_12345-if00
restart_method: command

[printer]
kinematics: cartesian
max_velocity: 400
max_accel: 8000
square_corner_velocity: 5.0
max_z_velocity: 5
max_z_accel: 250
minimum_cruise_ratio: 0.3


# ---------------- Extruder / Bed / Fans ----------------

[extruder]
step_pin: PA7
dir_pin: PA6
enable_pin: !PC4
microsteps: 16
rotation_distance: 7.1910
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC9
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
min_temp: 0
max_temp: 400
pressure_advance: 0.05
pressure_advance_smooth_time: 0.06
max_extrude_only_distance: 100.0
max_extrude_cross_section: 50.0
# control = pid
# pid_kp = 41.745
# pid_ki = 8.977
# pid_kd = 48.529

[heater_bed]
heater_pin: PA8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC1
control = pid
pid_kp = 45.986
pid_ki = 0.757
pid_kd = 698.409
min_temp: 0
max_temp: 130

[fan]
pin: PC8

[heater_fan hotend_fan]
pin: PC7
heater: extruder
heater_temp: 50.0

[controller_fan stepper_fan]
pin: PC6
idle_timeout: 300

# ---------------- Motion ----------------

[stepper_x]
step_pin: !PB14
dir_pin: PB13
enable_pin: !PB15
microsteps: 16
rotation_distance: 40
endstop_pin: !PA2
position_endstop: 0
position_max: 310
homing_speed: 50

[stepper_y]
step_pin: PB10
dir_pin: PB2
enable_pin: !PB12
microsteps: 16
rotation_distance: 40
endstop_pin: !PA1
position_endstop: 0
position_max: 310
homing_speed: 50

[stepper_z]
step_pin: PB0
dir_pin: !PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_max: 400
position_min: -10

[input_shaper]
shaper_type_x = mzv
shaper_freq_x = 38.5
shaper_type_y = ei
shaper_freq_y = 41.0


# ---------------- Probe / Mesh ----------------

[bltouch]
sensor_pin: PC2
control_pin: PC3
x_offset: 27.25
y_offset: -12.8
# z_offset: 1.654   # let SAVE_CONFIG manage this
speed: 5
samples: 3
samples_result: average
samples_tolerance: 0.03
samples_tolerance_retries: 5
stow_on_each_sample: True
probe_with_touch_mode: True

[safe_z_home]
home_xy_position: 150,150
speed: 100
z_hop: 10
z_hop_speed: 5
move_to_previous: False

[bed_mesh]
speed: 120
horizontal_move_z: 5
mesh_min: 30,20
mesh_max: 300,290
algorithm: bicubic
probe_count: 5,5
mesh_pps: 3,3
fade_start: 1.0
fade_end: 10.0
fade_target: 0.0

# ---------------- Lights / VSD / Status ----------------

[neopixel my_neopixel]
pin: PB7
color_order: GRB
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0

[virtual_sdcard]
path: /home/sonic/printer_data/gcodes

[display_status]
[pause_resume]
[exclude_object]    # required for object-aware meshing
[idle_timeout]
timeout: 86400



# =============================================================================
#                                   MACROS
# =============================================================================

[gcode_macro PRINT_START]
description: "Prep only; no mesh load"
gcode:
  G90
  G21
  M83
  LED_ON
  G28
  # No mesh load here




[gcode_macro PRINT_END]
gcode:
  M400
  G92 E0
  G1 E-3.0 F500
  G91
  G1 Z15 F3000
  G90
  G1 X50 Y{printer.configfile.config["stepper_y"]["position_max"]} F6000
  M104 S0
  M140 S0
  M106 S0
  M84

# --- Fixed purge line (front-left) ---
[gcode_macro _PURGE_LINE]
gcode:
  SAVE_GCODE_STATE NAME=Pre_Prime
  G90
  M83
  G92 E0
  G1 Z10 F3000
  G1 X10 Y10 F6000
  G1 Z0.24 F1200
  G1 X125 Y10 F1500 E35
  G1 X126 Y10 F1500
  G1 E-0.7 F1800
  G1 Z6 F3000
  G1 X5 Y5 F6000
  G92 E0
  RESTORE_GCODE_STATE NAME=Pre_Prime MOVE=0



# --- Rectangle mesh with scaled probe_count inside [bed_mesh] window ---
[gcode_macro AREA_MESH_CALIBRATE]
description: "Rectangle-only bed mesh within [bed_mesh] limits"
gcode:
  {% if 'AREA_START' in params and 'AREA_END' in params %}
    {% set bm = printer["configfile"].config["bed_mesh"] %}
    {% set minx = bm.mesh_min.split(",")[0]|float %}
    {% set miny = bm.mesh_min.split(",")[1]|float %}
    {% set maxx = bm.mesh_max.split(",")[0]|float %}
    {% set maxy = bm.mesh_max.split(",")[1]|float %}
    {% set s = params.AREA_START.split(",") %}
    {% set e = params.AREA_END.split(",") %}
    {% set ax0 = s[0]|float %}{% set ay0 = s[1]|float %}
    {% set ax1 = e[0]|float %}{% set ay1 = e[1]|float %}

    {% set pad = 2.0 %}
    {% set ax0 = [ax0 - pad, minx]|max %}
    {% set ay0 = [ay0 - pad, miny]|max %}
    {% set ax1 = [ax1 + pad, maxx]|min %}
    {% set ay1 = [ay1 + pad, maxy]|min %}

    {% set pc = bm.probe_count.split(",") %}
    {% set pcx_full = pc[0]|int %}{% set pcy_full = pc[1]|int %}
    {% set pcx = (pcx_full * (ax1-ax0)/(maxx-minx))|round(0)|int %}
    {% set pcy = (pcy_full * (ay1-ay0)/(maxy-miny))|round(0)|int %}
    {% set pcx = 3 if pcx < 3 else (pcx_full if pcx > pcx_full else pcx) %}
    {% set pcy = 3 if pcy < 3 else (pcy_full if pcy > pcy_full else pcy) %}

    {action_respond_info("AREA_MESH_CALIBRATE -> min=%.2f,%.2f  max=%.2f,%.2f  probes=%d,%d" %
      (ax0, ay0, ax1, ay1, pcx, pcy))}
    BED_MESH_CALIBRATE mesh_min={ax0},{ay0} mesh_max={ax1},{ay1} probe_count={pcx},{pcy} samples=2
  {% else %}
    {action_respond_info("AREA_MESH_CALIBRATE called without AREA_START/END")}
  {% endif %}

# --- Adaptive mesh v2: union of polygons; FULL-BED fallback if polygons unusable ---
[gcode_macro ADAPTIVE_MESH_V2]
description: "Use slicer exclude_object polygons for area mesh; else full-bed mesh"
# set to 0 if you prefer to SKIP meshing when polygons are missing
variable_fallback_fullbed: 1
gcode:
  {% set bm = printer["configfile"].config["bed_mesh"] %}
  {% set minx = bm.mesh_min.split(",")[0]|float %}
  {% set miny = bm.mesh_min.split(",")[1]|float %}
  {% set maxx = bm.mesh_max.split(",")[0]|float %}
  {% set maxy = bm.mesh_max.split(",")[1]|float %}
  {% set objs = printer.exclude_object.objects %}

  {% set have_poly = 0 %}
  {% set raw_minx =  1e9 %}{% set raw_miny =  1e9 %}
  {% set raw_maxx = -1e9 %}{% set raw_maxy = -1e9 %}
  {% for o in objs %}
    {% if o.polygon and o.polygon|length > 0 %}
      {% for p in o.polygon %}
        {% set px = p[0]|float %}{% set py = p[1]|float %}
        {% set have_poly = 1 %}
        {% if px < raw_minx %}{% set raw_minx = px %}{% endif %}
        {% if py < raw_miny %}{% set raw_miny = py %}{% endif %}
        {% if px > raw_maxx %}{% set raw_maxx = px %}{% endif %}
        {% if py > raw_maxy %}{% set raw_maxy = py %}{% endif %}
      {% endfor %}
    {% endif %}
  {% endfor %}

  {% if have_poly == 0 %}
    {% if printer["gcode_macro ADAPTIVE_MESH_V2"].fallback_fullbed|int == 1 %}
      {action_respond_info("[ADAPTIVE] No polygons found — running FULL-BED mesh.")}
      BED_MESH_CALIBRATE
    {% else %}
      {action_respond_info("[ADAPTIVE] No polygons found — skipping mesh (set fallback_fullbed=1 to force full-bed).")}
    {% endif %}
  {% else %}
    {% set bed_w = (printer.toolhead.axis_maximum.x - printer.toolhead.axis_minimum.x) %}
    {% set bed_h = (printer.toolhead.axis_maximum.y - printer.toolhead.axis_minimum.y) %}
    {% if raw_minx < 0 or raw_miny < 0 %}
      {% set raw_minx = raw_minx + bed_w/2.0 %}
      {% set raw_maxx = raw_maxx + bed_w/2.0 %}
      {% set raw_miny = raw_miny + bed_h/2.0 %}
      {% set raw_maxy = raw_maxy + bed_h/2.0 %}
      {action_respond_info("ADAPTIVE_MESH_V2: center-origin polygons detected → shifted")}
    {% endif %}

    {% set sx = [raw_minx, minx]|max %}
    {% set sy = [raw_miny, miny]|max %}
    {% set ex = [raw_maxx, maxx]|min %}
    {% set ey = [raw_maxy, maxy]|min %}

    {% set ms = 25.0 %}
    {% if (ex - sx) < ms %}
      {% set cx = (sx + ex)/2.0 %}
      {% set sx = cx - (ms/2.0) %}
      {% set ex = cx + (ms/2.0) %}
      {% if sx < minx %}{% set sx = minx %}{% set ex = minx + ms %}{% endif %}
      {% if ex > maxx %}{% set ex = maxx %}{% set sx = maxx - ms %}{% endif %}
    {% endif %}
    {% if (ey - sy) < ms %}
      {% set cy = (sy + ey)/2.0 %}
      {% set sy = cy - (ms/2.0) %}
      {% set ey = cy + (ms/2.0) %}
      {% if sy < miny %}{% set sy = miny %}{% set ey = miny + ms %}{% endif %}
      {% if ey > maxy %}{% set ey = maxy %}{% set sy = maxy - ms %}{% endif %}
    {% endif %}

    {action_respond_info("ADAPTIVE V2 -> AREA_START=%.2f,%.2f  AREA_END=%.2f,%.2f" % (sx, sy, ex, ey))}
    AREA_MESH_CALIBRATE AREA_START={sx},{sy} AREA_END={ex},{ey}
  {% endif %}

# --- QoL / Utilities ---

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_extrude: 1.0
gcode:
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set z_safe = 2.0 if act_z < (max_z - 2.0) else (max_z - act_z) %}
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% set get_params = ('VELOCITY=' + params.VELOCITY) if 'VELOCITY' in params|upper else "" %}
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z4.5 F300
    G90
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
  G28 X Y
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  G1 Y{y_park} F2000
  M84
  CANCEL_PRINT_BASE

[gcode_macro HEAT]
description: Heats extruder and moves to a safe spot
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
  {% set Z = params.Z|default(50)|float %}
  {% set X = params.X|default(110)|float %}
  {% set Y = params.Y|default(110)|float %}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
  {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
  G1 Z{Z} F500
  G1 X{X} Y{Y} F6000

[gcode_macro COOL]
description: Turns off all heaters
gcode: TURN_OFF_HEATERS

[gcode_macro PREHEAT_PLA]
description: Preheats extruder and bed for PLA
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|float %}
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}

[gcode_macro BED_MESH]
description: Heats bed, creates a full-bed mesh, then saves
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
  {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
  M190 S{BED_TEMP}
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE
  TURN_OFF_HEATERS
  SAVE_CONFIG

[gcode_macro G29]
description: "Load saved mesh 'default' (no probing)"
gcode:
  BED_MESH_PROFILE LOAD=default
  {action_respond_info("G29: loaded mesh profile 'default'")}


[gcode_macro NOZZLE_MID]
description: Moves nozzle to bed center
gcode:
  {% set Z = params.Z|default(10)|float %}
  {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
  G1 Z{Z} F500
  G1 X110 Y110 F6000

# ----- LED helpers -----

[gcode_macro LED_ON]
gcode: SET_LED LED=my_neopixel RED=1 GREEN=1 BLUE=1

[gcode_macro LED_OFF]
gcode: SET_LED LED=my_neopixel RED=0 GREEN=0 BLUE=0

# ---------------- Screws tilt adjust ----------------

[screws_tilt_adjust]
screw1: 23,63
screw1_name: front left
screw2: 223,63
screw2_name: front right
screw3: 223,263
screw3_name: back right
screw4: 23,263
screw4_name: back left
speed: 100.0
screw_thread: CW-M5

# ---------------- Optional filament runout (COMMENTED) ----------------
# If you wire the OEM sensor to the Z-endstop header, you can enable this.
# [filament_switch_sensor RunoutSensor]
# pause_on_runout: true
# switch_pin: ^!PA0
# event_delay: 0.5
# pause_delay: 0.5
# (Run FS test with: QUERY_FILAMENT_SENSOR SENSOR=RunoutSensor)


[include moonraker_obico_macros.cfg]

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bltouch]
#*# z_offset = 1.624
#*#
#*# [input_shaper]
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 41.745
#*# pid_ki = 8.977
#*# pid_kd = 48.529
#*#
#*# [heater_bed]
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.044167, 0.000000, 0.057500, 0.114167
#*# 	-0.084167, -0.040833, 0.002500, 0.035000
#*# 	-0.118333, -0.101667, -0.050833, -0.039167
#*# 	-0.130000, -0.105000, -0.070833, -0.030833
#*# x_count = 4
#*# y_count = 4
#*# mesh_x_pps = 3
#*# mesh_y_pps = 3
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 109.945
#*# max_x = 200.035
#*# min_y = 85.5524
#*# max_y = 224.3924
